out
for (i in 1:ncol(nhanes)) {
out[i,2]<-mean(as.numeric(nhanes[,i]), na.rm=T)
out[i,3]<-sd(as.numeric(nhanes[,i]), na.rm=T)
}
out
stargazer(nhanes, type="text", title="Descriptive Statistics", digits=1, out="Descriptive.txt")
knitr::opts_chunk$set(echo = TRUE)
style_file("~/Google Drive/Teaching/EPID674/2020/Scripts/epid674_ch3.Rmd")
library(styler)
style_file("~/Google Drive/Teaching/EPID674/2020/Scripts/epid674_ch3.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(foreign)
library(epiDisplay)
library(stats)
library(Hmisc)
library(gmodels)
library(grid)
source_dir <- "~/Google Drive/Teaching/EPID674/2020/Source/"
load(paste0(source_dir, "bpa.rda"))
hist(bpa$bmi)
bpa$educat[is.nan(bpa$educat)]<-NA
bpa$SMK[is.nan(bpa$SMK)]<-NA
#model 1
model1<-lm(bmi~ubpa+ucr+age+factor(gender)+factor(raceeth)+factor(educat)+factor(inccat))
#model 1
model1<-lm(bmi~ubpa+ucr+age+factor(gender)+factor(raceeth)+factor(educat)+factor(inccat), data=bpa)
summary(model1)
summary(model1)[2,]
summary(model1)$coef[2,]
model2<-update(model1, .~.+factor(SMK))
summary(model2)$coef[2,]
### compute how much the beta changed
beta.model1<-model1$coef[2]
beta.model2<-model2$coef[2]
(beta.model2-beta.model1)/beta.model1
# 24% change
# keep smk and model 2 is the final model
summary(model2)
# for a 1-unit increase in BPA
beta.model2<-model2$coef[2]
beta.model2
model2$coef[2]
model2$coef[2]-1.96*summary(model2)$coef[2,2]
model2$coef[2]+1.96*summary(model2)$coef[2,2]
IQR(ubpa)*model2$coef[2]
IQR(bpa$ubpa)
IQR(bpa$ubpa)*model2$coef[2]
IQR(bpa$ubpa)*(model2$coef[2]-1.96*summary(model2)$coef[2,2])
IQR(bpa$ubpa)*(model2$coef[2]+1.96*summary(model2)$coef[2,2])
bpa.bmi80<-subset(bpa, bmi<80)
model3<-update(model2, .~., data=bpa.bmi80)
summary(model3)
summary(model3)$coef[2,]
AIC(model2, model3)
bpa.bmi60<-subset(bpa, bmi<60)
model4<-update(model2, .~., data=bpa.bmi60)
summary(model4)
AIC(model3, model4)
AIC(model2)
AIC(model3)
AIC(model3)
AIC(model4)
model4$coef[2] # estimate
model4$coef[2]-1.96*summary(model4)$coef[2,2] # lower confidence interval
model4$coef[2]+1.96*summary(model4)$coef[2,2] # uppder confidence interval
IQR(bpa$ubpa)*model4$coef[2] # estimate
IQR(bpa$ubpa)*(model4$coef[2]-1.96*summary(model4)$coef[2,2]) # lower confidence interval
IQR(bpa$ubpa)*(model4$coef[2]+1.96*summary(model4)$coef[2,2]) # upper confidence interval
par(mfrow=c(2,2))
plot(model2, main="Diagnostic plots for BMI")
plot(model4, main="Diagnostic plots for BMI")
par(mfrow=c(1,1))
plot(model2, which=4)
plot(model4, which=4)
hist(residuals(model2), breaks=20, main="Histogram for BMI-residuals")
hist(residuals(model4), breaks=20, main="Histogram for BMI-residuals")
model5<-update(model2, .+log(bmi)-bmi~.)
summary(model5)
summary(model5)$coef[2,]
par(mfrow=c(2,2))
plot(model5, main="Diagnostic plots for log(BMI)")
## better constant variance
par(mfrow=c(1,1))
hist(residuals(model5), breaks=20, main="Histogram for log(BMI)-residuals")
## not skewed and normal distribution
### log(bmi) seems better
tab1(bpa$gender)
model5.men<-lm(log(bmi)~ubpa+ucr+age+factor(raceeth)+factor(educat)+factor(inccat)+factor(SMK),
data=bpa, subset=(gender==1))
summary(model5.men)
model5.wom<-lm(log(bmi)~ubpa+ucr+age+factor(raceeth)+factor(educat)+factor(inccat)+factor(SMK),
data=bpa, subset=(gender==2))
summary(model5.wom)
100*(exp(IQR(ubpa)*model5.wom$coef[2])-1) #percent increase
model5.men<-lm(log(bmi)~ubpa+ucr+age+factor(raceeth)+factor(educat)+factor(inccat)+factor(SMK),
data=bpa, subset=(gender==1))
summary(model5.men)$coef[2,]
100*(exp(IQR(bpa$ubpa)*model5.men$coef[2])-1) #percent increase
100*(exp(IQR(bpa$ubpa)*(model5.men$coef[2]-1.96*summary(model5.men)$coef[2,2]))-1) # lower confidence interval
100*(exp(IQR(bpa$ubpa)*(model5.men$coef[2]+1.96*summary(model5.men)$coef[2,2]))-1) # lower confidence interval
model5.wom<-lm(log(bmi)~ubpa+ucr+age+factor(raceeth)+factor(educat)+factor(inccat)+factor(SMK),
data=bpa, subset=(gender==2))
summary(model5.wom)
100*(exp(IQR(bpa$ubpa)*model5.wom$coef[2])-1) #percent increase
100*(exp(IQR(bpa$ubpa)*(model5.wom$coef[2]-1.96*summary(model5.wom)$coef[2,2]))-1) # lower confidence interval
100*(exp(IQR(bpa$ubpa)*(model5.wom$coef[2]+1.96*summary(model5.wom)$coef[2,2]))-1) # lower confidence interval
model5.full<-lm(log(bmi)~factor(gender)*(ubpa+ucr+age+factor(raceeth)
+factor(educat)+factor(inccat)+factor(SMK)), data=bpa)
summary(model5.full)
model5.int<-lm(log(bmi)~ubpa*factor(gender)+ucr+age+factor(raceeth)
+factor(educat)+factor(inccat)+factor(SMK), data=bpa)
summary(model5.int)
100*(exp(IQR(bpa$ubpa)*model5.int$coef[2])-1) #percent increase
100*(exp(IQR(bpa$ubpa)*(model5.int$coef[2]-1.96*summary(model5.int)$coef[2,2]))-1) # lower confidence interval
100*(exp(IQR(bpa$ubpa)*(model5.int$coef[2]+1.96*summary(model5.int)$coef[2,2]))-1) # lower confidence interval
bpa$gender1=3-bpa$gender
model5.int1<-lm(log(bmi)~ubpa*factor(gender1)+ucr+age+I(age^2)++factor(raceeth)
+factor(educat)+factor(inccat)+factor(SMK), data=bpa)
summary(model5.int1)
100*(exp(IQR(bpa$ubpa)*model5.int1$coef[2])-1) #percent increase
100*(exp(IQR(bpa$ubpa)*(model5.int1$coef[2]-1.96*summary(model5.int1)$coef[2,2]))-1) # lower confidence interval
100*(exp(IQR(bpa$ubpa)*(model5.int1$coef[2]+1.96*summary(model5.int1)$coef[2,2]))-1) # lower confidence interval
knitr::opts_chunk$set(echo = TRUE)
style_file("~/Google Drive/Teaching/EPID674/2020/HW_answers/HW_6A_markdown.Rmd")
library(styler)
style_file("~/Google Drive/Teaching/EPID674/2020/HW_answers/HW_6A_markdown.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(foreign)
library(epiDisplay)
library(stats)
library(Hmisc)
library(gmodels)
library(grid)
source_dir <- "~/Google Drive/Teaching/EPID674/2020/Source/"
load(paste0(source_dir, "bpa.rda"))
model6<-glm(t2dm~ubpa+age+factor(gender)+ucr, data=bpa, family=binomial)
bpa$t2dm<-ifelse(bpa$a1c>=6.5|bpa$dmmed==1, 1, 0)
bpa$educat[is.nan(bpa$educat)]<-NA
bpa$SMK[is.nan(bpa$SMK)]<-NA
tab1(bpa$t2dm)
model6<-glm(t2dm~ubpa+age+factor(gender)+ucr, data=bpa, family=binomial)
summary(model6)
summary(model6)$coef[2,]
style_file("~/Google Drive/Teaching/EPID674/2020/HW_answers/HW_6B_markdown.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(foreign)
library(epiDisplay)
library(stats)
library(Hmisc)
library(gmodels)
library(grid)
library(survival)
source_dir <- "~/Google Drive/Teaching/EPID674/2020/Source/"
load(paste0(source_dir, "nhanes3.rda"))
nhanes$educ[is.nan(nhanes$educ)]<-NA
nhane3$alc[is.nan(nhanes$alc)]<-NA
nhanes$educ[is.nan(nhanes$educ)]<-NA
nhane$alc[is.nan(nhanes$alc)]<-NA
nhanes$educ[is.nan(nhanes$educ)]<-NA
nhanes$alc[is.nan(nhanes$alc)]<-NA
tab1(nhanes$d_cvd)
summ(nhanes$pmon_mec)
### Define Surv()
surv.cvd<-Surv(nhanes$pmon_mec, nhanes$d_cvd)
surv.cvd
### K-M Life table and curve
fit.cvd<-survfit(Surv(nhanes$pmon_mec, nhanes$d_cvd)~1)
summary(fit.cvd)
plot(fit.cvd, ylim=c(0.8,1.0), conf.int=F, mark.time=F)
### Cox regression
cox.bpb<-coxph(Surv(pmon_mec, d_cvd)~bpb)
nhanes$educ[is.nan(nhanes$educ)]<-NA
nhanes$alc[is.nan(nhanes$alc)]<-NA
tab1(nhanes$d_cvd)
summ(nhanes$pmon_mec)
### Define Surv()
surv.cvd<-Surv(nhanes$pmon_mec, nhanes$d_cvd)
surv.cvd
### K-M Life table and curve
fit.cvd<-survfit(Surv(nhanes$pmon_mec, nhanes$d_cvd)~1)
summary(fit.cvd)
plot(fit.cvd, ylim=c(0.8,1.0), conf.int=F, mark.time=F)
### Cox regression
cox.bpb<-coxph(Surv(pmon_mec, d_cvd)~bpb, data=nhanes)
summary(cox.bpb)
cox.bpb.adj<-coxph(Surv(pmon_mec, d_cvd)~bpb+age+factor(sex)+factor(race)+factor(educ)+factor(smk)+factor(alc), data=nhanes)
summary(cox.bpb.adj)
### Test for the proportional hazards assumption
test.prop<-cox.zph(cox.bpb.adj)
test.prop
## Display a graph of the scaled Schoenfeld residuals, along with a smooth curve
plot(test.prop, var=3)
abline(h=0, lty=3, col=2)
nhanes$educ[is.nan(nhanes$educ)]<-NA
nhanes$alc[is.nan(nhanes$alc)]<-NA
tab1(nhanes$d_cvd)
summ(nhanes$pmon_mec)
### Define Surv()
surv.cvd<-Surv(nhanes$pmon_mec, nhanes$d_cvd)
surv.cvd
surv.cvd[1:10]
### K-M Life table and curve
fit.cvd<-survfit(Surv(nhanes$pmon_mec, nhanes$d_cvd)~1)
summary(fit.cvd)
summary(fit.cvd)[1:10]
summary(fit.cvd)[1:10,]
plot(fit.cvd, ylim=c(0.8,1.0), conf.int=F, mark.time=F)
str(summary(fit.cvd))
### Cox regression
cox.bpb<-coxph(Surv(pmon_mec, d_cvd)~bpb, data=nhanes)
summary(cox.bpb)
cox.bpb.adj<-coxph(Surv(pmon_mec, d_cvd)~bpb+age+factor(sex)+factor(race)+factor(educ)+factor(smk)+factor(alc), data=nhanes)
summary(cox.bpb.adj)
### Test for the proportional hazards assumption
test.prop<-cox.zph(cox.bpb.adj)
test.prop
## Display a graph of the scaled Schoenfeld residuals, along with a smooth curve
plot(test.prop, var=3)
abline(h=0, lty=3, col=2)
plot(test.prop, var=3)
abline(h=0, lty=3, col=2)
## Display a graph of the scaled Schoenfeld residuals, along with a smooth curve
plot(test.prop, var=3) +
abline(h=0, lty=3, col=2)
# stratify by sex
cox.bpb.adj1<-coxph(Surv(pmon_mec, d_cvd)~bpb+age+strata(sex)+factor(race)+factor(educ)+factor(smk)+factor(alc), data=nhanes)
summary(cox.bpb.adj1)
test.prop1<-cox.zph(cox.bpb.adj1)
test.prop1
cox.zph(cox.bpb.adj1)
## compute HR for a 1-SD increase in bpb
sd(bpb)
## compute HR for a 1-SD increase in bpb
sd(nhanes$bpb)
cox.bpb.adj1$coef
summary(cox.bpb.adj1)$coef
HR.cox
exp(cox.bpb.adj1$coef[1]*sd(nhanes$bpb))
exp((cox.bpb.adj1$coef[1]-1.96*summary(cox.bpb.adj1)$coef[1,3])*sd(nhanes$bpb))
exp((cox.bpb.adj1$coef[1]+1.96*summary(cox.bpb.adj1)$coef[1,3])*sd(nhanes$bpb))
bpb3<-cut2(nhanes$bpb, g=3)
tab1(bpb3)
tab1(nhanes$bpb3)
nhanes$bpb3<-cut2(nhanes$bpb, g=3)
tab1(nhanes$bpb3)
cox.bpb3<-coxph(Surv(pmon_mec, d_cvd)~bpb3, data=nhanes)
summary(cox.bpb3)
cox.bpb3.adj<-coxph(Surv(pmon_mec, d_cvd)~bpb3+age+factor(sex)+factor(race)+factor(educ)+factor(smk)+factor(alc), data=nhanes)
summary(cox.bpb3.adj)
### Test for the proportional hazards assumption
test.prop<-cox.zph(cox.bpb3.adj)
test.prop
plot(test.prop)  # for all variables
plot(test.prop, var=1)
plot(test.prop, var=2)
plot(test.prop, var=4)
abline(h=0, lty=3, col=2)
plot(test.prop, var=4) +
abline(h=0, lty=3, col=2)
# stratify by sex
cox.bpb3.adj1<-coxph(Surv(pmon_mec, d_cvd)~bpb3+age+strata(sex)+factor(race)+factor(educ)+factor(smk)+factor(alc), data=nhanes)
cox.zph(cox.bpb3.adj1)
summary(cox.bpb3.adj1)
### bottom vs. middle
exp(cox.bpb3.adj1$coef[1])
exp(cox.bpb3.adj1$coef[1]-1.96*summary(cox.bpb3.adj1)$coef[1,3])
exp(cox.bpb3.adj1$coef[1]+1.96*summary(cox.bpb3.adj1)$coef[1,3])
### bottom vs. top
exp(cox.bpb3.adj1$coef[2])
exp(cox.bpb3.adj1$coef[2]-1.96*summary(cox.bpb3.adj1)$coef[2,3])
exp(cox.bpb3.adj1$coef[2]+1.96*summary(cox.bpb3.adj1)$coef[2,3])
summary(cox.bpb3.adj1)
style_file("~/Google Drive/Teaching/EPID674/2020/HW_answers/HW_6C_markdown.Rmd")
install.packages(c("BiasedUrn", "qqman"))
library( minfi )
### Install minfi -- 450k analysis package
BiocManager::install( "minfi" )
library( minfi )
library( limma )
library( matrixStats )
library( MASS )
library( abind )
library( sva )
setwd("~/Documents/GitHub/Application-and-Analysis-of-Epigenetic-Data-in-Public-Health-Research")
# Setting file paths for data, output, scripts
#The rest of this script assumes that your data are in a folder called "project" on the Cloud.
#It also assumes that your ouptut will be stored in a subfolder called "output" on the Cloud.
#As you work on your own computer, you will need to specify the folder locations.
# Folder location of the data files
#data_dir <- "/cloud/project/"
data_dir <- "~/Documents/GitHub/Application-and-Analysis-of-Epigenetic-Data-in-Public-Health-Research/data/" #Kelly's personal computer directory
data_dir
# Folder location to put the output files
#output_dir <- "/cloud/project/output/"
output_dir <- "~/Documents/GitHub/Application-and-Analysis-of-Epigenetic-Data-in-Public-Health-Research/output/" #Kelly's personal computer directory
output_dir
# Record the current date for record keeping and appending to output file names
date<-format(Sys.Date(), "%Y%m%d")
date
pheno <- read.csv( paste0(data_dir, "samplesheet.csv"), header = TRUE, stringsAsFactors = FALSE )
dim( pheno )
head( pheno )
RGset <- read.metharray.exp( file.path( paste0(data_dir, "/idats" )), targets = pheno, verbose = TRUE )
dim( RGset )
manifest <- getManifest( RGset )
library (IlluminaHumanMethylation450kmanifest)
BiocManager::install( "IlluminaHumanMethylation450kmanifest")
library (IlluminaHumanMethylation450kmanifest)
manifest <- getManifest( RGset )
str( manifest )
annotation <- getAnnotation( RGset )
library( IlluminaHumanMethylation450kanno.ilmn12.hg19)
BiocManager::install( c("IlluminaHumanMethylation450kmanifest", "IlluminaHumanMethylation450kanno.ilmn12.hg19"))
library( IlluminaHumanMethylation450kanno.ilmn12.hg19)
annotation <- getAnnotation( RGset )
dim( annotation )
annotation[ 1:2, ]
str( manifest )
typeof( annotation )
typeof( RGset )
getClass( RGset )
manifest
head( getProbeInfo( manifest ) )
dim( getProbeInfo( manifest ) )
table( getProbeInfo( manifest )$Color )
pd <- pData( RGset )
table( pd$casestatus )
table( pd$gender )
table( pd$casestatus, pd$gender )
table( pd$Batch)
table( pd$casestatus, pd$Batch )
dim( pd )
length( pd$GEOID )
summary( pd$age )
summary( pd$age[ pd$gender == "M" ] )
summary( pd$age[ pd$gender == "F" ] )
head( pd )
save(RGset, file=paste0(data_dir, "RGset.rda"))
pd <- pData( RGset )
#Set up color palettes for plotting
myColors <- c( "dodgerblue", "firebrick1", "seagreen3" )
graphColors = c( "#023FA5","#7D87B9","#BEC1D4","#D6BCC0","#BB7784", "#D33F6A", "#11C638","#8DD593","#C6DEC7","#EAD3C6",
"#F0B98D","#EF9708", "#0FCFC0","#9CDED6","#D5EAE7","#F3E1EB","#F6C4E1","#F79CD4", "#4A6FE3","#8595E1",
"#B5BBE3","#E6AFB9","#E07B91" )
# MethylSet (Mset) contains metylated and unmethylated signals made using preprocessRaw()
rawMSet <- preprocessRaw( RGset )
rawMSet
#save( rawMSet, file = "rawMSet.rda" )
#M signal per probe, per sample
Meth <- getMeth( rawMSet )
Meth[ 1:5, 1:5 ]
#M signal per probe, per sample
Unmeth <- getUnmeth( rawMSet )
Unmeth[ 1:5, 1:5 ]
#################################################
#Overall intensity: M vs. U
pd$MQC <- log2( colMedians( Meth ) )
pd$UQC <- log2( colMedians( Unmeth ) )
pd$Array <- factor( pd$Array )
palette( graphColors )
pdf( paste0(output_dir,"MvsUplot.pdf" ))
plot( pd$UQC, pd$MQC, main = "M vs. U QC", pch = 16, xlab = "Log2 Median Unmethylated Intensity", ylab = "Log2 Median Methylated Intensity", cex.lab = 1.2, cex.main = 2 )
plot( pd$UQC, pd$MQC, col = as.factor( pd$Slide ), main = "M vs. U QC by Slide", pch = 16, xlab = "Log2 Median Unmethylated Intensity", ylab = "Log2 Median Methylated Intensity", cex.lab = 1.2, cex.main = 2 )
legend( "bottomright",levels(as.factor( pd$Slide ) ), fill = graphColors )
plot( pd$UQC, pd$MQC, col = pd$Array, main = "M vs. U QC by Position", pch = 16, xlab = "Log2 Median Unmethylated Intensity", ylab = "Log2 Median Methylated Intensity", cex.lab = 1.2, cex.main = 2 )
legend( "bottomright", levels( pd$Array ), fill = graphColors )
palette( myColors )
plot( pd$UQC, pd$MQC, col = pd$Batch, main = "M vs. U QC by Batch", pch = 16, xlab = "Log2 Median Unmethylated Intensity", ylab = "Log2 Median Methylated Intensity", cex.lab = 1.2, cex.main = 2 )
legend( "bottomright", c( "Batch 1", "Batch 2" ), fill = myColors )
dev.off()
#Drop (or if really small sample: watch out for): Samples with UQC<11 & MQC<11
which( pd$UQC < 11 )
length( which( pd$UQC < 11 ) )
which( pd$MQC < 11 )
length( which( pd$MQC < 11 ) )
#Raw density plot
beta.raw <- getBeta( rawMSet )
mvalue.raw <- getM( rawMSet )
type <- getProbeType( rawMSet )
probe.type <- data.frame( Name = rownames( beta.raw ), Type = type )
pdf(paste0(output_dir, "Density-plot-preproccessRaw.pdf" ))
densityPlot( beta.raw, sampGroups = pd$casestatus, main = "Raw Beta by Case Status" )
densityPlot( beta.raw, sampGroups = pd$Batch, main = "Raw Beta by Batch" )
plotBetasByType( beta.raw[,1], probeTypes = probe.type, main = "Raw Beta by Probe Type, Sample 1" )
densityPlot( mvalue.raw, sampGroups = pd$Batch, main = "Raw M-value by Batch", xlab = "M-value" )
dev.off()
beta.raw2 <- beta.raw
beta.raw2[ is.na( beta.raw2 ) ] <- 0
#makes the principal component object
prin <- prcomp( t( beta.raw2 ), center = T, scale. = F )
#pulls out proportion of variance explained by each PC
out.var <- prin$sdev^2 / sum( prin$sdev^2 ) #the percent variance at each PC
out.var[ 1:10 ]
sum( out.var )
#Raw PCA plots
pdf( paste0(output_dir,"PCA-plots-Raw.pdf" ))
screeplot( prin, col = "dodgerblue", xlab = "Principal Components of Raw Beta Values", main = "", cex.lab = 1.3 )
plot.new()
palette( myColors )
par( mar = c( 0, 0, 0, 0 ) )
legend( "bottom", levels( as.factor( pd$gender ) ), fill = myColors, title = "Principal Components by Sex" )
pairs( prin$x[,1:6], col = as.factor( pd$gender ), labels = c( "PC1", "PC2", "PC3", "PC4","PC5", "PC6" ), pch = 1, cex = 0.5 )
plot.new()
legend( "bottom", levels( as.factor( pd$Batch ) ), fill = myColors, title = "Principal Components by Batch" )
pairs( prin$x[,1:6], col = as.factor( pd$Batch ), labels = c( "PC1", "PC2", "PC3", "PC4","PC5", "PC6" ), pch = 1, cex = 0.5 )
plot.new()
palette( graphColors )
legend( "bottom", levels( as.factor( pd$Array ) ), fill = graphColors, title = "Principal Components by Array Position" )
pairs( prin$x[,1:6], col = as.factor( pd$Array ), labels = c( "PC1", "PC2", "PC3", "PC4","PC5", "PC6" ), pch = 1, cex = 0.5 )
plot.new()
legend( "bottom", levels( as.factor( pd$Slide ) ), fill = graphColors, title = "Principal Components by Slide" )
pairs( prin$x[,1:6], col = as.factor( pd$Slide ), labels = c( "PC1", "PC2", "PC3", "PC4","PC5", "PC6" ), pch = 1, cex = 0.5 )
dev.off()
##################################################
#Detection P
detP <- detectionP( RGset )
dim( detP )
acorn( detP )
detP[ 1:5, 1:5 ]
#save(detP,file="detection-P.rda")
failed <- detP > 0.01
per.samp <- colMeans( failed ) # Fraction of failed positions per sample (length: 42)
summary( per.samp )
per.probe <- rowMeans( failed ) # Fraction of failed samples per position (length: 485512)
summary( per.probe )
sum( per.samp > 0.01 ) #How many samples had more than 1% of sites fail?
sum( per.probe > 0.1 ) # How many positions failed in >10% of samples?
# Identify samples that are failed
probe.fail <- failed[ per.probe > 0.1, ]
length(probe.fail)
sample.fail <- per.samp[per.samp > 0.01 ]
sample.fail
save(detP,file=paste0(data_dir, "detection-P.rda"))
pdf( paste0(output_dir,"DetectionP-bySample.pdf" ))
hist( per.samp, breaks = 40, col = "dodgerblue", cex.lab = 1.3, xlab = "Fraction of failed positions per sample" )
abline( v = 0.01, col = "red" )
hist( per.probe, breaks = 40, col = "dodgerblue", cex.lab = 1.3, xlab = "Fraction of failed samples per probe", ylim = c( 0,500 ) )
abline( v = 0.1, col = "red",lwd = 2 )
dev.off()
RGset.drop <- RGset[ ,!colnames( RGset ) %in% names( sample.fail ) ] #Drop samples that failed by detection p.
dim( RGset.drop )
##################################################
load( paste0(data_dir,"cross.probes.info.rda" ))
dim( cross.probes.info )
head( cross.probes.info )
#rec is to use the 47 cross probe cutoff
#Noob
noob <- preprocessNoob( RGset.drop, offset = 15, dyeCorr = TRUE, verbose = TRUE )
noob.dropP <- noob[ !rownames( noob ) %in% rownames( probe.fail ), ]
noob.dropCross <- noob.dropP[ !rownames( noob.dropP ) %in% cross.probes.info$TargetID, ]
noob <- noob.dropCross
#save(noob, file=paste0(output_dir,"noob.rda"))
beta.n <- getBeta( noob )
pd <- pData( noob )
##################################################
GmRawSet <- mapToGenome( rawMSet )
sex <- getSex( GmRawSet )
# #save(sex, file="Estimate-Sex.rda")
pd <- merge( pd, as.matrix( sex ), by = "row.names", sort = FALSE )
rownames( pd ) <- pd$Basename
pd <- pd[,-1]
table( pd$predictedSex, pd$gender )
# F  M
# F 22  0
# M  0 18
pdf( paste0(output_dir,"Sex-Plot.pdf" ))
plotSex( sex )
sex
table( pd$predictedSex, pd$gender )
save(sex, file=paste0(output_dir,"Estimate-Sex.rda"))
# #save(sex, file=paste0(data_dir,"Estimate-Sex.rda"))
pd <- merge( pd, as.matrix( sex ), by = "row.names", sort = FALSE )
save(sex, file=paste0(data_dir,"Estimate-Sex.rda"))
pdf( paste0(output_dir,"Sex-Plot.pdf" ))
plotSex( sex )
pdf( paste0(output_dir,"Sex-Plot.pdf" ))
plotSex( as.matrix(sex) )
plotSex( sex )
plotSex( getSex( GmRawSet ) )
plotSex( sex )
head(sex)
plot(sex$xMed, sex$yMed, col=sex$predictedSex)
levels(sex$predictedSex)
labels(sex$predictedSex)
table(sex$predictedSex)
str(sex$predictedSex)
palette( myColors )
plot(sex$xMed, sex$yMed, col=as.factor(sex$predictedSex))
legend("bottomleft", col=as.factor(sex$predictedSex)) legend=levels(as.factor(sex$predictedSex)))
palette( myColors )
plot(sex$xMed, sex$yMed, col=as.factor(sex$predictedSex))
legend("bottomleft", col=as.factor(sex$predictedSex), legend=levels(as.factor(sex$predictedSex)))
palette( myColors )
plot(sex$xMed, sex$yMed, col=as.factor(sex$predictedSex), las=1, xlab="X chr, median total intensity (log2)", ylab="Y chr, median total intensity (log2)")
legend("bottomleft", col=as.factor(sex$predictedSex), legend=levels(as.factor(sex$predictedSex)), cex=0.8)
palette( myColors )
plot(sex$xMed, sex$yMed, col=as.factor(sex$predictedSex), las=1, xlab="X chr, median total intensity (log2)", ylab="Y chr, median total intensity (log2)")
legend("bottomleft", col=as.factor(sex$predictedSex), legend=levels(as.factor(sex$predictedSex)), cex=0.8, pch=21)
plot(sex$xMed, sex$yMed, col=as.factor(sex$predictedSex), las=1, xlab="X chr, median total intensity (log2)", ylab="Y chr, median total intensity (log2)")
myColors
levels(as.factor(sex$predictedSex))
plot(sex$xMed, sex$yMed, col=as.factor(sex$predictedSex), las=1, xlab="X chr, median total intensity (log2)", ylab="Y chr, median total intensity (log2)")
legend("bottomleft", col=as.factor(sex$predictedSex), legend=levels(as.factor(sex$predictedSex)), cex=0.8, pch=16)
plot(sex$xMed, sex$yMed, col=as.factor(sex$predictedSex), las=1, xlab="X chr, median total intensity (log2)", ylab="Y chr, median total intensity (log2)")
legend("bottomleft", col=levels(as.factor(sex$predictedSex)), legend=levels(as.factor(sex$predictedSex)), cex=0.8, pch=16)
plot(sex$xMed, sex$yMed, col=as.factor(sex$predictedSex), las=1, xlab="X chr, median total intensity (log2)", ylab="Y chr, median total intensity (log2)")
legend("bottomleft", col=myColors[1:2], legend=levels(as.factor(sex$predictedSex)), cex=0.8, pch=16)
cell <- estimateCellCounts( RGset.drop )
#Cell type
library( FlowSorted.Blood.450k )
BiocManager::install( "FlowSorted.Blood.450k" )
