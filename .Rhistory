install.packages("psych")
install.packages("Rtools")
library(psych)
install.packages(c("car", "ggplot2", "lmerTest", "MuMIn"))
install.packages(c("lavaan", "MBESS", "multiplex"))
BiocManager::install( c( "minfi", "limma", "qqman", "sva", "missMethyl", "BiasedUrn",
"IlluminaHumanMethylation450kanno.ilmn12.hg19", "pheatmap" ) )
install.packages("BiocManager")
BiocManager::install( c( "minfi", "limma", "qqman", "sva", "missMethyl", "BiasedUrn",
"IlluminaHumanMethylation450kanno.ilmn12.hg19", "pheatmap" ) )
install.packages(c("dplyr", "forcats", "ggplot2", "lifecycle", "nloptr", "OpenMx", "plyr", "rlang", "sp"))
install.packages("QCGWAS")
?clm
127.18+2.88
1e-5
.00005
.00001
5e-2
### load necessary packages
library( readr )
?read_delim
?read.delim
?read_delim
?r.table
?read.delim
?read_delim
?read.delim
?read.delim
library(readr)
library( minfi )
library( limma )
library( qqman )
library( sva )
library( missMethyl )
library( BiasedUrn )
library( IlluminaHumanMethylation450kanno.ilmn12.hg19 )
library( pheatmap )
?read_delim
?read.delim
?updateObject
?getSnpBeta
?getSnpBeta
library( readr )
library( minfi )
library( limma )
library( qqman )
library( sva )
library( missMethyl )
library( BiasedUrn )
library( IlluminaHumanMethylation450kanno.ilmn12.hg19 )
library( pheatmap )
library( ffpe )
install.packages("ffpe")
BiocManager::install("ffpe")
?match
# load necessary packages
library( SummarizedExperiment )
library( readxl )
library( recount )
library( lattice )
library( RColorBrewer )
library( jaffelab )
library( limma )
library( edgeR )
library( AnnotationDbi )
library( org.Hs.eg.db )
library( goseq )
library( GO.db )
BiocManager::install( c( "jaffelab", "edgeR", "goseq" ) )
?read.delim
?match
?merge
?factor
86+72
28
58+28+72
?plot
?pairs
?legend
library( SummarizedExperiment )
library( readxl )
library( recount )
library( lattice )
library( RColorBrewer )
library( jaffelab )
library( limma )
library( edgeR )
library( AnnotationDbi )
library( org.Hs.eg.db )
library( goseq )
library( GO.db )
library( readr )
?topTable
degradeStats
library( SummarizedExperiment )
library( readxl )
library( recount )
library( lattice )
library( RColorBrewer )
library( jaffelab )
library( limma )
library( edgeR )
library( AnnotationDbi )
library( org.Hs.eg.db )
library( goseq )
library( GO.db )
library( readr )
?topTable
12545+13098
10391+2154
10503+2595
install.packages(c("backports", "car", "carData", "effectsize", "ellipsis", "glue", "insight", "jomo", "lavaan", "maptools", "MBESS", "mice", "miceadds", "mnormt", "modelr", "naniar", "openxlsx", "parameters", "performance", "pillar", "pkgbuild", "polspline", "ps", "RcppArmadillo", "rlang", "rpf", "scales", "sem", "sfsmisc", "sjlabelled", "sjPlot", "sjstats", "sp", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "zoo"))
library(BiasedUrn)
?BiasedUrn
?GEOquery
library(GEOquery)
?GEOquery
?GEOquery::
?GEOquery
?nlme
library(qqman)
?qqman
library(nlme)
?nlme
# MethylSet (Mset) contains metylated and unmethylated signals made using preprocessRaw()
rawMSet <- preprocessRaw( RGset )
library( minfi )
library( limma )
library( matrixStats )
library( MASS )
library( abind )
library( sva )
library( Hmisc )
#Set up color palettes for plotting
myColors <- c( "dodgerblue", "firebrick1", "seagreen3" )
graphColors = c( "#023FA5","#7D87B9","#BEC1D4","#D6BCC0","#BB7784", "#D33F6A", "#11C638","#8DD593","#C6DEC7","#EAD3C6",
"#F0B98D","#EF9708", "#0FCFC0","#9CDED6","#D5EAE7","#F3E1EB","#F6C4E1","#F79CD4", "#4A6FE3","#8595E1",
"#B5BBE3","#E6AFB9","#E07B91" )
####################################################
###SET YOUR WOKRING DIRECTORY AND READ IN RAW DATA
####################################################
#The rest of this script assumes that your
#working directory is the same as the folder
#into which you downloaded the raw .idat files
#from the Box link. Two options:
#1) Place the file path to this folder between the quotation marks in the setwd command below
#2) Manually change the working directory in RStudio: Session > Set Working Directory > Choose Directory
setwd( "C:/Users/David Sosnowski/Desktop/EpiLab2020" )
getwd()
pheno <- read.csv( "samplesheet.csv", header = TRUE, stringsAsFactors = FALSE )
dim( pheno )
head( pheno )
RGset <- read.metharray.exp( file.path( "C:/Users/David Sosnowski/Desktop/EpiLab2020/idats" ), targets = pheno, verbose = TRUE )
dim( RGset )
manifest <- getManifest( RGset )
str( manifest )
annotation <- getAnnotation( RGset )
dim( annotation )
annotation[ 1:2, ]
typeof( annotation )
typeof( RGset )
getClass( RGset )
manifest
head( getProbeInfo( manifest ) )
dim( getProbeInfo( manifest ) )
table( getProbeInfo( manifest )$Color )
pd <- pData( RGset )
table( pd$casestatus )
table( pd$gender )
table( pd$casestatus, pd$gender )
table( pd$Batch)
table( pd$casestatus, pd$Batch )
dim( pd )
length( pd$GEOID )
summary( pd$age )
summary( pd$age[ pd$gender == "M" ] )
summary( pd$age[ pd$gender == "F" ] )
head( pd )
# MethylSet (Mset) contains metylated and unmethylated signals made using preprocessRaw()
rawMSet <- preprocessRaw( RGset )
rawMSet
#save( rawMSet, file = "rawMSet.rda" )
#M signal per probe, per sample
Meth <- getMeth( rawMSet )
Meth[ 1:5, 1:5 ]
#M signal per probe, per sample
Unmeth <- getUnmeth( rawMSet )
Unmeth[ 1:5, 1:5 ]
##################################################
#Overall intensity: M vs. U
pd$MQC <- log2( colMedians( Meth ) )
pd$UQC <- log2( colMedians( Unmeth ) )
##################################################
#Raw density plot
beta.raw <- getBeta( rawMSet )
mvalue.raw <- getM( rawMSet )
type <- getProbeType( rawMSet )
probe.type <- data.frame( Name = rownames( beta.raw ), Type = type )
##################################################
#Raw PCA plots
beta.raw2 <- beta.raw
beta.raw2[ is.na( beta.raw2 ) ] <- 0
#makes the principal component object
prin <- prcomp( t( beta.raw2 ), center = T, scale. = F )
#pulls out proportion of variance explained by each PC
out.var <- prin$sdev^2 / sum( prin$sdev^2 ) #the percent variance at each PC
out.var[ 1:10 ]
##################################################
#Detection P
detP <- detectionP( RGset )
dim( detP )
acorn( detP )
#save(detP,file="detection-P.rda")
failed <- detP > 0.01
per.samp <- colMeans( failed ) # Fraction of failed positions per sample (length: 42)
summary( per.samp )
per.probe <- rowMeans( failed ) # Fraction of failed samples per position (length: 485512)
summary( per.probe )
sum( per.samp > 0.01 ) #How many samples had more than 1% of sites fail?
sum( per.probe > 0.1 ) # How many positions failed in >10% of samples?
probe.fail <- failed[ per.probe > 0.1, ]
sample.fail <- per.samp[per.samp > 0.01 ]
RGset.drop <- RGset[ ,!colnames( RGset ) %in% names( sample.fail ) ] #Drop samples that failed by detection p.
dim( RGset.drop )
##################################################
#cross-reactive probes
load( "cross.probes.info.rda" )
dim( cross.probes.info )
head( cross.probes.info )
#Noob
noob <- preprocessNoob( RGset.drop, offset = 15, dyeCorr = TRUE, verbose = TRUE )
noob.dropP <- noob[ !rownames( noob ) %in% rownames( probe.fail ), ]
noob.dropCross <- noob.dropP[ !rownames( noob.dropP ) %in% cross.probes.info$TargetID, ]
noob <- noob.dropCross
#save(noob, file="noob.rda")
beta.n <- getBeta( noob )
pd <- pData( noob )
##################################################
##Sex Check
GmRawSet <- mapToGenome( rawMSet )
sex <- getSex( GmRawSet )
plotSex(GmRawSet)
sex
plotSex(sex)
# #save(sex, file="Estimate-Sex.rda")
pd <- merge( pd, as.matrix( sex ), by = "row.names", sort = FALSE )
rownames( pd ) <- pd$Basename
pd <- pd[,-1]
table( pd$predictedSex, pd$gender )
addSex(GmRawSet, sex = sex)
# F  M
# F 22  0
# M  0 18
pdf( "Sex-Plot.pdf" )
plotSex( GmRawSet )
dev.off()
GmRawSet
plotSex( sex )
colData(GmRawSet)
##################################################
##Sex Check
GmRawSet <- mapToGenome( rawMSet )
sex <- getSex( GmRawSet )
sex <- addSex( GmRawSet, sex = sex )
# #save(sex, file="Estimate-Sex.rda")
pd <- merge( pd, as.matrix( sex ), by = "row.names", sort = FALSE )
rownames( pd ) <- pd$Basename
pd <- pd[,-1]
table( pd$predictedSex, pd$gender )
# F  M
# F 22  0
# M  0 18
pdf( "Sex-Plot.pdf" )
plotSex( sex )
dev.off()
